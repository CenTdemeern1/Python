@precedence {
  cond,
  trail,
  power @left,
  prefix,
  times @left,
  plus @left,
  shift @left,
  bitand @left,
  xor @left,
  bitor @left,
  compare @left,
  and @left,
  or @left
}

@top Script { (newline | statement)+ }

@skip { space | newlineEmpty | newlineBracketed | Comment }

Decorator { "@" DottedName ArgList? newline }

FunctionDefinition { kw<"async">? kw<"def"> VariableDefinition ParamList ("->" test)? Body }

ClassDefinition { kw<"class"> VariableDefinition ArgList? Body }

param { VariableDefinition (":" test)? (AssignOp{"="} test)? | "*" VariableDefinition? | "**" VariableDefinition | "/" }

ParamList { "(" commaSep<param>? ")" }

statement { simpleStatement | compoundStatement }

simpleStatement { smallStatement (";" smallStatement?)* (newline | eof) }

smallStatement {
  // FIXME possible to get VariableDefinition for variables in assign statements?
  AssignStatement { expressions (":" test)? (AssignOp{"="} (YieldExpression | expressions))+ } |
  UpdateStatement { expressions UpdateOp (YieldExpression | commaSep<test>) } |
  ExpressionStatement { expressions } |
  DeleteStatement { kw<"del"> commaSep<expression> } |
  PassStatement { kw<"pass"> } |
  BreakStatement { kw<"break"> } |
  ContinueStatement { kw<"continue"> } |
  ReturnStatement { kw<"return"> commaSep<test | "*" expression> } |
  RaiseStatement { kw<"raise"> (test (kw<"from"> test)?)? } |
  ImportStatement |
  ScopeStatement { (kw<"global"> | kw<"nonlocal">) commaSep<VariableName> } |
  AssertStatement { kw<"assert"> commaSep<test> }
}

expressions { commaSep<"*" expression | test> }

ImportStatement {
  kw<"import"> DottedName (kw<"as"> VariableDefinition)? |
  kw<"from"> (("." | "...")+ DottedName? | DottedName) kw<"import"> ("*" | "(" importedNames ")" | importedNames)
}
importedNames { commaSep<VariableDefinition | VariableName kw<"as"> VariableDefinition> }

commaSep<expr> { expr ("," expr?)* }

@export compoundStatement {
  IfStatement |
  WhileStatement { kw<"while"> testNamed Body elseClause? } |
  ForStatement { kw<"async">? kw<"for"> commaSep<"*"? expression> kw<"in"> commaSep<test> Body elseClause? } |
  TryStatement |
  WithStatement { kw<"async">? kw<"with"> commaSep<test (kw<"as"> VariableDefinition)?> Body } |
  FunctionDefinition |
  ClassDefinition |
  DecoratedStatement { Decorator+ (ClassDefinition | FunctionDefinition) }
}

elseClause { kw<"else"> Body }

IfStatement {
  kw<"if"> testNamed Body
  (kw<"elif"> testNamed? Body)*
  elseClause?
}

TryStatement {
  kw<"try"> Body
  ((kw<"except"> test kw<"as"> VariableDefinition Body)+ elseClause)?
  kw<"finally"> Body
}

Body { ":" (simpleStatement | newline statement (continueBody statement)* (endBody | eof)) }

test {
 testInner |
 CondExpression { testInner !cond kw<"if"> testInner kw<"else"> test } |
 LambdaExpression { kw<"lambda"> ParamList ":" test }
}

testNoCond {
  testInner |
  LambdaExpression { kw<"lambda"> ParamList ":" testNoCond }
}

testNamed {
  test | NamedExpression { test AssignOp{":="} test }
}

testInner { binaryTest | unaryTest | expression }

binaryTest[name="BinaryExpression"] {
  testInner !or kw<"or"> testInner |
  testInner !and kw<"and"> testInner |
  testInner !compare (CompareOp | kw<"in"> | kw<"not"> kw<"in"> | kw<"is"> kw<"not">?) testInner
}

unaryTest[name="UnaryExpression"] { kw<"not"> testInner }

expression {
  BinaryExpression |
  UnaryExpression { !prefix ArithOp{"+" | "-" | "~"} expression } |
  AwaitExpression { kw<"await"> expression } |
  ParenthesizedExpression { "(" (testNamed | "*" expression | YieldExpression) ")" } |
  TupleExpression { "(" (testNamed | "*" expression) (("," (testNamed | "*" expression))+ ","? | ",") ")" } |
  ComprehensionExpression { "(" (testNamed | "*" expression) compFor ")" } |
  ArrayExpression { "[" commaSep<testNamed | "*" expression>? "]" } |
  ArrayComprehensionExpression { "[" (testNamed | "*" expression) compFor "]" } |
  DictionaryExpression { "{" commaSep<test ":" test | "**" expression>? "}" } |
  DictionaryComprehensionExpression { "{" (test ":" test | "**" expression) compFor "}" } |
  SetExpression { "{" commaSep<test | "*" expression> "}" } |
  SetComprehensionExpression { "{" (test | "*" expression) compFor "}" } |
  CallExpression { expression !trail ArgList } |
  MemberExpression { expression !trail ("[" commaSep<test | test? ":" test? (":" test?)?> "]" | "." PropertyName) } |
  VariableName |
  Number |
  (String | FormatString)+ |
  Ellipsis { "..." } |
  kw<"None"> |
  @specialize[name=Boolean]<identifier, "True" | "False">
}

YieldExpression { kw<"yield"> (kw<"from"> test | commaSep<test | "*" expression>) }

BinaryExpression {
  expression !bitor BitOp{"|"} expression |
  expression !xor BitOp{"^"} expression |
  expression !bitand BitOp{"&"} expression |
  expression !shift BitOp{"<<" | ">>"} expression |
  expression !plus ArithOp{"+" | "-"} expression |
  expression !times ArithOp{"*" | "@" | "/" | "%" | "//"} expression |
  expression !power ArithOp{"**"} expression
}

ArgList { "(" commaSep<argument>? ")" }

argument { test compFor? | VariableDefinition AssignOp{"=" | ":="} test | "**" test | "*" test }

compFor {
  kw<"async">? kw<"for"> commaSep<expression> kw<"in"> testInner (compFor | compIf)?
}

compIf {
  kw<"if"> testNoCond (compFor | compIf)?
}

VariableDefinition { identifier ~maybeAssign }

VariableName { identifier ~maybeAssign }

PropertyName { identifier }

DottedName { identifier ("." identifier)* }

kw<term> { @specialize[name={term}]<identifier, term> }

@skip {} {
  String { shortString | longString }

  FormatString {
    formatStringStart<"'"> (formatString1Content | formatStringExpr)* "'" |
    formatStringStart<'"'> (formatString2Content | formatStringExpr)* '"'
  }
}

formatStringExpr { "{" test "}" }

@tokens {
  CompareOp { "<" | ">" | $[<>=!] "=" | "<>" }

  UpdateOp { ($[+\-@%&|^] | "<<" | ">>" | "*" "*"? | "/" "/"?) "=" }

  @precedence { longString, shortString, formatStringStart<"'">, formatStringStart<'"'>, identifier }

  identifierChar { std.asciiLetter | $[_\u{a1}-\u{10ffff}] }

  identifier { identifierChar (std.digit | identifierChar)* }

  // FIXME properly parse interpolation, split long strings into multiple pieces

  stringPrefix { $[rRuUbB] | $[bB] $[rR] | $[rR] $[bR] }

  formatPrefix { $[fF] | $[fF] $[rR] | $[rR] $[fF] }

  shortString { stringPrefix? ("'" (!['\\\n\r] | "\\" _)* "'"? | '"' (!["\\\n\r] | "\\" _)* '"'?) }

  formatStringStart<quote> { formatPrefix quote }

  formatString1Content { !['{\\] | "\\" _ | "{{" }
  formatString2Content { !["{\\] | "\\" _ | "{{" }

  longString { stringPrefix? ("'''" longSingleContent* "'''" | '"""' longDoubleContent* '"""') }

  longSingleContent { !['\\] | "\\" _ | "'" longSingle2 }
  longSingle2 { !['\\] | "\\" _ | "'" longSingle3 }
  longSingle3 { !['\\] | "\\" _ }

  longDoubleContent { !["\\] | "\\" _ | '"' longDouble2 }
  longDouble2 { !["\\] | "\\" _ | '"' longDouble3 }
  longDouble3 { !["\\] | "\\" _ }

  Number {
    (std.digit ("_" | std.digit)* ("." std.digit ("_" | std.digit)*)? | "." std.digit ("_" | std.digit)*)
      ($[eE] $[+\-]? std.digit ("_" | std.digit)*)? $[jJ]? |
    "0" $[bB] $[_01]+ |
    "0" $[oO] $[_0-7]+ |
    "0" $[xX] $[_0-9a-fA-F]+
  }

  Comment { "#" ![\n\r]* }

  space { ($[ \t\f] | "\\" $[\n\r] )+ }
}

@external tokens newlines from "./tokens" { newline, newlineBracketed, newlineEmpty, eof }

@external tokens bodyContinue from "./tokens" { continueBody, endBody }
